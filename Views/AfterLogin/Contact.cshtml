@model ZUVO_MVC_.Models.Query
@{
    ViewData["Title"] = "Contact Us";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - ZUVO</title>
    <style>
        :root {
            --primary-color: #3D3229;
            --secondary-color: #2B1D13;
            --accent-color: #D4AF37;
            --text-color: #333;
            --light-bg: #f5f5f5;
            --white: #ffffff;
        }

        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--light-bg);
            color: var(--text-color);
        }

        .header {
            background-color: var(--primary-color);
            color: var(--white);
            padding: 1rem;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .header h1 {
            margin: 0;
            font-size: 2rem;
            font-weight: 600;
        }

        .header .logo {
            font-size: 1.5rem;
            color: var(--accent-color);
            font-weight: bold;
            letter-spacing: 2px;
        }

        .contact-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 20px;
            display: flex;
            gap: 30px;
        }

        .contact-form, .status-section {
            flex: 1;
            background: var(--white);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .contact-form:hover, .status-section:hover {
            transform: translateY(-5px);
        }

        .section-title {
            color: var(--primary-color);
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
            font-weight: 600;
            border-bottom: 2px solid var(--accent-color);
            padding-bottom: 0.5rem;
        }

        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-color);
        }

        input[type="text"],
        input[type="email"],
        textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        input[type="text"]:focus,
        input[type="email"]:focus,
        textarea:focus {
            border-color: var(--accent-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.2);
        }

        textarea {
            height: 150px;
            resize: vertical;
        }

        .submit-btn {
            background: var(--primary-color);
            color: var(--white);
            padding: 14px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            transition: background-color 0.3s ease;
        }

        .submit-btn:hover {
            background: var(--secondary-color);
        }

        .success-message {
            display: none;
            background-color: #d4edda;
            color: #155724;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 6px;
            text-align: center;
            font-weight: 500;
        }

        .status-item {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
            background: var(--white);
            transition: transform 0.3s ease;
        }

        .status-item:hover {
            transform: translateX(5px);
        }

        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 4px;
            color: var(--white);
            font-weight: 600;
            margin-bottom: 10px;
            font-size: 0.9rem;
        }

        .status-pending {
            background-color: #ffc107;
        }

        .status-inprogress {
            background-color: #17a2b8;
        }

        .status-resolved {
            background-color: #28a745;
        }

        .footer {
            text-align: center;
            padding: 2rem;
            background-color: var(--primary-color);
            color: var(--white);
            margin-top: 2rem;
        }

        .footer .logo {
            color: var(--accent-color);
            font-weight: bold;
            font-size: 1.2rem;
        }

        @media (max-width: 768px) {
            .contact-container {
                flex-direction: column;
            }
            
            .contact-form, .status-section {
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Contact <span class="logo">ZUVO</span></h1>
    </div>

    <div class="contact-container">
        <div class="contact-form">
            <h2 class="section-title">Send Us a Message</h2>
            <div class="success-message" id="successMessage">
                Thank you for your query! We will get back to you via email soon.
            </div>
            <form id="queryForm" asp-action="SubmitQuery" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="UserId" value="@User.Identity.Name" />
                <div class="form-group">
                    <label asp-for="Name">Name</label>
                    <input asp-for="Name" required>
                </div>
                <div class="form-group">
                    <label asp-for="Email">Email</label>
                    <input asp-for="Email" type="email" required>
                </div>
                <div class="form-group">
                    <label asp-for="QueryText">Your Query</label>
                    <textarea asp-for="QueryText" required></textarea>
                </div>
                <button type="submit" class="submit-btn">Submit Query</button>
            </form>
        </div>

        <div class="status-section">
            <h2 class="section-title">Your Query Status</h2>
            <div id="queryStatusList">
                <!-- Query status items will be loaded here -->
            </div>
        </div>
    </div>

    <div class="footer">
        <p>Â© 2024 <span class="logo">ZUVO</span> - Your Trusted Partner in Vehicle Management</p>
    </div>

    <script>
        document.getElementById('queryForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            // Log form data for debugging
            for (let pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }
            
            const formDataObj = {};
            formData.forEach((value, key) => {
                formDataObj[key] = value;
            });

            // Add default values for required fields
            formDataObj.Status = 0; // Pending status
            formDataObj.UserId = '@User.Identity.Name'; // Set the logged-in user's ID

            fetch('/AfterLogin/SubmitQuery', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: new URLSearchParams(formDataObj).toString()
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.text().then(text => {
                        console.error('Server response:', text);
                        throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    const successMessage = document.getElementById('successMessage');
                    successMessage.style.display = 'block';
                    this.reset();
                    loadQueryStatus();
                    
                    // Hide success message after 5 seconds
                    setTimeout(() => {
                        successMessage.style.display = 'none';
                    }, 5000);
                } else {
                    alert(data.message || 'Error submitting query');
                }
            })
            .catch(error => {
                console.error('Error details:', error);
                alert('An error occurred while submitting the query. Please check the console for details.');
            });
        });

        function loadQueryStatus() {
            fetch('/AfterLogin/GetQueryStatus')
                .then(response => {
                    console.log('Status response:', response.status);
                    if (!response.ok) {
                        return response.text().then(text => {
                            console.error('Server response:', text);
                            throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Status data:', data);
                    const statusList = document.getElementById('queryStatusList');
                    statusList.innerHTML = '';
                    
                    if (data && Array.isArray(data)) {
                        data.forEach(query => {
                            const statusText = query.status === 0 ? 'Pending' : 
                                            query.status === 1 ? 'InProgress' : 'Resolved';
                            const statusClass = `status-${statusText.toLowerCase()}`;
                            const statusItem = document.createElement('div');
                            statusItem.className = 'status-item';
                            statusItem.innerHTML = `
                                <div class="status-badge ${statusClass}">${statusText}</div>
                                <p><strong>Query:</strong> ${query.queryText}</p>
                                <p><strong>Submitted:</strong> ${new Date(query.submissionDate).toLocaleDateString()}</p>
                                ${query.response ? `<p><strong>Response:</strong> ${query.response}</p>` : ''}
                            `;
                            statusList.appendChild(statusItem);
                        });
                    } else {
                        console.warn('Unexpected data format:', data);
                    }
                })
                .catch(error => {
                    console.error('Error details:', error);
                    alert('An error occurred while loading query status. Please check the console for details.');
                });
        }

        // Load initial status
        loadQueryStatus();
    </script>
</body>
</html> 